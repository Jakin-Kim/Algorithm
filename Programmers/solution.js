// 문제설명
// 직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다.
// 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return하도록 solution함수를 완성해주세요.
// 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.

// 제한사항
// 1. v는 세 점의 좌표가 들어있는 2차원 배열입니다.
// 2. v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표]순으로 주어집니다.
// 3. 좌표값은 1 이상 10억 이하의 자연수입니다.
// 4. 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.

// 입출력 예시
// v: [[1,4], [3,4], [3,10]] / result: [1,10]
// v: [[1,1], [2,2], [1,2]] / result: [2,1]

function solution(v) {

    // 1. v배열의 요소(각 꼭지점)을 순회한 값을 객체에 담는다.
    let result = [];
    let xAxis = {}; // x축 : point[0]
    let yAxis = {}; // y축 : point[1]
    // 2. 각 요소(꼭지점)의 x축(0번째 index)과 y축(1번째 index)이 2쌍씩 있어야한다.
    for(let point of v) { // 공간복잡도 고려하기
        if(!xAxis[point[0]]) { // x좌표가 객체에 없는 경우,
            xAxis[point[0]] = 1; // 하나 추가하기(2쌍이니까 최대가 2까지)
        } else { // x좌표가 객체에 있는 경우,
            xAxis[point[0]]++;
        }

        if(!yAxis[point[1]]) { // y좌표가 객체에 있는 경우,
            yAxis[point[1]] = 1;
        } else { // y좌표가 객체에 없는 경우,
            yAxis[point[1]]++;
        }
    }

    // 3. 2쌍씩 없는 요소를 찾는다.
        // xAxis = {
        //     '1': 1,
        //     '3': 2
        // }
    // x축을 첫번째로 순회하기
    for(let key in xAxis) {
        if(xAxis[key] === 1) {
            result.push(Number(key)); // [1]
        }
    }

        // yAxis = {
        //     '4': 2,
        //     '10': 1
        // }
    // y축을 두번째로 순회하기
    for(let key in yAxis) {
        if(yAxis[key] === 1) {
            result.push(Number(key)); // [1,10]
        }
    }    
    
    // 4. 각 축에서 1쌍 밖에 없는 키를 배열에 담아, 해당 배열을 반환한다.
    return result;
}
